R V COLLEGE OF ENGINEERING

[Autonomous Institute Affiliated VTU, Belagavi
DEPARTMENT OF COMPUTER SCIENCE & ENGINEERING BENGALURU - 560059

PROGRAMMING IN C LAB
[18CS13/23]
1.		Simple computational problems using arithmetic expressions and use of each operator leading to implementation of a commercial calculator with appropriateoutput.
2.		Write a program to print out a multiplication table as given below.
1	2	3	4	5	6	7	8	9	10
2	4	6	8	10	12	14	16	18	20
3	6	9	12	15	18	21	24	27	30
4	8	12	16	20	24	28	32	36	40
5	10	15	20	25	30	35	40	45	50
3.		Compute the roots of the equation ax2 + bx + c = 0and print using three-decimal places. The roots are real −b±√D/ 2aif the discriminant D = b2−4ac is non-negative. If the discriminate is negative, then the roots are complex conjugate−b /2a ±√−Di/ 2a.The program proceeds in the following steps.

a)	The program should accept the values of a, b and c from the keyboard.
b)	No solution if both a and b are zero. The program terminates with appropriate message.
c)	Linear equation if a = 0 but b ≠ 0 and the root is −c/b. The program prints out the root with appropriate message and the program terminates.
d)	Calculate the discriminant D and determines the corresponding roots.
e)	 Display all possible roots of a quadratic equation with appropriate message.
4.		Write a program to print the prime numbers in a range entered by user.
5.		Design and develop using an iterative problem solving approach for Taylor series approximation for five decimal digits to compute Sin(x)= x - x3/3! + x5/5! - x7/7! + x9/9!..............Xn / n!. Read the value for N.
6.		Write a C program to generate any one patterns as given below:
 i) ( to print * if it is even number)                            ii)
 1                                                                                55555         
**                                                                               4444
333                                                                             333                     
****                                                                            22
55555                                                                          1
7.		Demonstrate a C program that reads N integer numbers and arrange them in ascending or descending order using bubble sort technique.
8.		Write a C program to read matrix of mXn order from the user and display whether it is lower triangular matrix or upper triangular matrix.
9.		Develop and demonstrate a C program for Matrix multiplication:
  a)  Read the sizes of two matrices and check the compatibility for multiplication. 
b) Perform matrix multiplication and print the result along with the input matrix.
10.		Write a C program to insert a character at specified position and move the remaining character to right.
11.		Write a C program to search an element using Binary search.
12.		Write a C program to check whether a number is a power of 2or not.
13.		Write C user defined functions
a)	To input N integer numbers into a single dimension array.
b)	To sort the integer numbers in descending order using selection sort technique.
c)	To print the single dimension array elements.
Using these functions, write a C program to input N integer numbers into a single dimension array, sort them in descending order, and print both the given array & the sorted array with suitable headings.
14.		Write a C program to check whether the number entered is prime or not.
15.		Write a C program to read and find the frequency of characters in a given string.
16.		Write a C program to read a string and sort it alphabetically.
17.		Using functions develop a C program to perform the following tasks by parameter passing 
concept:
a)	To read a string from the user
b)	Print appropriate message for palindrome or not palindrome
18.		Write a program to enter a sentence and print total number of vowels and each vowel count separately.
19.		Write a C program to read a matrix A[m*n] and to find the following using functions: 
a) Sum of elements of each row. 
b) Sum of elements of each column. 
c) Sum of all the elements of matrix. 
d) Sum of principle diagonal elements
20.		Write a C program to check whether the entered number is positive, negative or zero.
21.		Write a C program to read a list of  N integer numbers in an array and print the following:
a) the maximum value
b) the minimum value
c) the range
 Hint: This is computed as maximum-minimum.
d) the average value
 Hint: To compute this, add all the numbers together into sumand count them all in Count. The average is Sum/Count
22.		Write a C program to generate Fibonacci series using recursion.
23.		Write a C program to perform the following operations using recursive functions:
a)GCD, LCM (Using GCD method)
b)Factorial of a Number
24.		Write a C program to find the length ofthe string without using library function.
25.		Write a C program to count vowels and consonants in a string using pointer.
26.		Write a C program to swap two numbers using pointers.
27.		Create a structure called student with the following members student name, rollno, and a structure with marks details in three tests. Write a C program to create N records and 
a)	Search on roll no and display all the records.
b)	Average marks in each test.
c)	Highest marks in each test.
28.		Write a C program to check whether the entered year is leap or not.
29.		Design a structure 'Complex' and write a C program to perform the following operations:
i.	Reading a complex number.
ii.	Addition of two complex numbers.
30.		Write a C program to input a number and check whether the number is palindrome or not.


























1. 
Simple computational problems using arithmetic expressions and use of each operator leading to implementation of a commercial calculator with appropriateoutput.

#include<stdio.h>
#include<math.h>
void main()
{
    int a,b,c;
    int ch;                    //stores the choice of operation
    
    // input section
    printf("\nEnter two numbers\n" );
    scanf("%d%d",&a,&b);
    printf("\n\n");
    printf("\n 1-ADD\n");
    printf("\n 2-SUB\n");
    printf("\n 3-MULTI\n");
    printf("\n 4-DIVIDE\n");
    printf("\nEnter your choice of operation\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1: c=a+b;
                    break;
        case 2: c=a-b;
                    break;
        case 3: c=a*b;
                    break;
        case 4: if(b==0)
                   {
                       printf("\n Divide by zero error! \n");
                       break;
                   }
                   else
                   {
                        c=a/b;                   //perform division operation
                        break;
                   }
       default:   //erroneous input
                      printf("\nInvalid choice! \n");
                      break;
  }
    printf("\nThe result is %d\n",c);
}
















2. Write a program to print out a multiplication table as given below.
1	2	3	4	5	6	7	8	9	10
2	4	6	8	10	12	14	16	18	20
3	6	9	12	15	18	21	24	27	30
4	8	12	16	20	24	28	32	36	40
5	10	15	20	25	30	35	40	45	50
#include <stdio.h>
int main()
{
    int n, i, j;

    printf( "Enter an integer: " );
    scanf("%d", &n );

    for( i=1; i<=5; i++ )
    {
        for ( j=1; j<=10; j++ )
		   printf( "%d\t",  j*i );
       printf("\n");  
    }
}














3. Compute the roots of the equation ax2 + bx + c = 0and print using three-decimal places. The roots are real −b±√D/ 2aif the discriminant D = b2−4ac is non-negative. If the discriminate is negative, then the roots are complex conjugate−b /2a ±√−Di/ 2a.The program proceeds in the following steps.

f)	The program should accept the values of a, b and c from the keyboard.
g)	No solution if both a and b are zero. The program terminates with appropriate message.
h)	Linear equation if a = 0 but b ≠ 0 and the root is −c/b. The program prints out the root with appropriate message and the program terminates.
i)	Calculate the discriminant D and determines the corresponding roots.
 Display all possible roots of a quadratic equation with appropriate message.


#include<stdio.h>
#include<math.h>
#include<stdlib.h>
main()
{
  float a,b,c,disc,root1,root2;
  printf("\nEnter the coefficients:\n");
  scanf("%f%f%f",&a,&b,&c);

if(a==0||c==0)
{
printf (“Not Possible\n”);
exit(0);
}
else
{
  disc=b*b-4*a*c;                       // ‘disc’ indicates discriminant


  
//Find the distinct roots
    if(disc>0)
   {
     root1=(-b + sqrt(disc)) / (2*a);
     root2=(-b - sqrt(disc)) / (2*a);
     printf("\n Roots are real & distinct! \n");
     printf("\n The roots are: \n%f\n%f\n",root1,root2);
   }

    else if(disc==0)     //Find the equal roots
    {
      root1=root2= -b / (2*a);
      printf("\n Roots are real & equal! \n");
      printf("\n The roots are \n%f\n%f\n",root1,root2);
     }

      else
      {
        //Find the complex roots
        root1= -b / (2*a);
        root2= sqrt(abs(disc)) / (2*a);
        printf("\n The roots are imaginary!\n");
        printf("\n The first root is %f + i%f \n",root1,root2);
        printf("\n The second root is %f - i%f \n",root1,root2);
       }
   }
}












4. Write a program to print the prime numbers in a range entered by user.
#include <stdio.h>
#include <stdlib.h>
void main()
{
    int num1, num2, i, j, flag, temp, count = 0;
 
    printf("Enter the value of num1 and num2 \n");
    scanf("%d %d", &num1, &num2);
    if (num2 < 2)
    {
        printf("There are no primes upto %d\n", num2);
        exit(0);
    }
    printf("Prime numbers are \n");
    temp = num1;
   
    if ( num1 % 2 == 0)
        num1++;

    for (i = num1; i <= num2; i = i + 2)
    {
        flag = 0;
        for (j = 2; j <= i / 2; j++)
        {
            if ((i % j) == 0)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            printf("%d\n", i);
            count++;
        }
    }
    printf("Number of primes between %d & %d = %d\n", temp, num2, count);
}


5. Design and develop using an iterative problem solving approach for Taylor series approximation for five decimal digits to compute Sin(x)= x - x3/3! + x5/5! - x7/7! + x9/9!..............Xn / n!. Read the value for N.

#include<stdio.h>
 
void main()
{
    int i, n;
    float x, sum, t;
    clrscr();
     
    printf(" Enter the value for x : ");
    scanf("%f",&x);
     
    printf(" Enter the value for n : ");
    scanf("%d",&n);
     
    x=x*3.14159/180;
    t=x;
    sum=x;
     
    /* Loop to calculate the value of Sine */
    for(i=1;i<=n;i++)
    {
        t=(t*(-1)*x*x)/(2*i*(2*i+1));
        sum=sum+t;
    }
     
    printf(" The value of Sin(%f) = %.4f",x,sum);
  }










6. Write a C program to generate any one patterns as given below:
 i) ( to print * if it is even number)                            ii)
 1                                                                                55555         
**                                                                               4444
333                                                                             333                     
****                                                                            22
55555                                                                          1

i) 							ii)
#include<stdio.h>

int main()
 {
 	int i,j,k,n;
 	
 	printf("Enter no of rows: ");
 	scanf("%d", &n);
 	
 	for (i = 1; i <= n; i++)
 	  {
 	    for( k = 1; k<=n-i; k++)
 	          printf(" ");
		  
		  for( j = 1; j <= i; j++)
		    {
		     if( i % 2 == 1)
			    printf("%d ", i); 	
			 
			 else
		        printf("* ");
	        }
		 printf("\n");    
	  }
 }







7. Demonstrate a C program that reads N integer numbers and arrange them in ascending or descending order using bubble sort technique.

rogram
#include<stdio.h>
 main()
{
       int a[10],n,i,j,temp;
       printf("\n Enter the size of n:\n" );
       scanf("%d",&n);
       printf("\n Enter the array elements: \n");
       for(i=0;i<n;i++)
       scanf("%d",&a[i]);
  // Bubble Sorting
      for(i=1;i<n;i++)	      /* ith smallest number bubbles up to its
                                              right spot in ith iteration */
     {
       for(j=0;j<n-i;j++)	      /* bubbling starts from the "deepest numbers"
                                              and proceeds upwards */

       /* element at jth position is "lighter" than the one on top,
           therefore jth element bubbles up */
       if(a[j]>=a[j+1])
      {
	  temp=a[j];
	  a[j]=a[j+1];
	  a[j+1]=temp;
       }
  }
    printf("\n The sorted array is: \n" );
    for(i=0;i<n;i++)
    printf("%d\n",a[i]);
}

























8. Write a C program to read matrix of mXn order from the user and display whether it is lower triangular matrix or upper triangular matrix.
#include <stdio.h>
void main()
{
    int array[3][3], i, j, flag = 0 ;
    printf("\n\t Enter the value of Matrix : ");
   
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
             scanf("%d", &array[i][j]);
    
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
        {
            if (array[i] < array[j] && array[i][j] == 0)
            {
                flag = flag + 1;
            }
        }
    }
    if (flag == 3)
        printf("\n\n Matrix is a Lower triangular matrix");
    else
        printf("\n\n Matrix is not a lower triangular matrix");
        
        
    flag==0;   
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
        {
            if (array[i] > array[j] && array[i][j] == 0)
            {
                flag = flag + 1;
            }
        }
    }
    if (flag == 3)
        printf("\n\n Matrix is a upper triangular matrix");
    else
        printf("\n\n Matrix is not a upper triangular matrix");    
}


10. Write a C program to insert a character at specified position and move the remaining character to right.
#include <stdio.h>
#include <string.h>
 
void main()
{
    int i, j, pos=0;
    char s1[20], ch, s3[20];
    
     printf("\nenter the character to be inserted:");
    scanf("%c",&ch);
    
    printf("\nenter the String:");
    scanf("%s",s1);
    
    printf("\nenter the position you like to insert:");
    scanf("%d",&pos);
    
      
    for ( i = 0,j = 0 ; i < pos ; i++,j++ ) 
        s3[j] = s1[i];
		  
	s3[j] = ch;
  	j++;
    
    
    while (s1[i] != '\0')
      	{
      		s3[j] = s1[i];
      		i++;
      		j++;
        }
	     
    s3[j] = '\0';
    printf("\nthe string after modification is\n\n %s\n", s3);
}




















9.
Develop and demonstrate a C program for Matrix multiplication:
  a)  Read the sizes of two matrices and check the compatibility for multiplication. 
b) Perform matrix multiplication and print the result along with the input matrix.


#include <stdio.h>

int main()
{
    int a[10][10], b[10][10], result[10][10], r1, c1, r2, c2, i, j, k;

    printf("Enter rows and column for first matrix: ");
    scanf("%d %d", &r1, &c1);

    printf("Enter rows and column for second matrix: ");
    scanf("%d %d",&r2, &c2);

    // Column of first matrix should be equal to column of second matrix and
    while (c1 != r2)
    {
        printf("Error! column of first matrix not equal to row of second.\n\n");
        printf("Enter rows and column for first matrix: ");
        scanf("%d %d", &r1, &c1);
        printf("Enter rows and column for second matrix: ");
        scanf("%d %d",&r2, &c2);
    }

    // Storing elements of first matrix.
    printf("\nEnter elements of matrix 1:\n");
    for(i=0; i<r1; ++i)
        for(j=0; j<c1; ++j)
        {
            printf("Enter elements a%d%d: ",i+1, j+1);
            scanf("%d", &a[i][j]);
        }

    // Storing elements of second matrix.
    printf("\nEnter elements of matrix 2:\n");
    for(i=0; i<r2; ++i)
        for(j=0; j<c2; ++j)
        {
            printf("Enter elements b%d%d: ",i+1, j+1);
            scanf("%d",&b[i][j]);
        }

    // Initializing all elements of result matrix to 0
    for(i=0; i<r1; ++i)
        for(j=0; j<c2; ++j)
        {
            result[i][j] = 0;
        }

    // Multiplying matrices a and b and
    // storing result in result matrix
    for(i=0; i<r1; ++i)
        for(j=0; j<c2; ++j)
            for(k=0; k<c1; ++k)
            {
                result[i][j]+=a[i][k]*b[k][j];
            }

    // Displaying the result
    printf("\nOutput Matrix:\n");
    for(i=0; i<r1; ++i)
        for(j=0; j<c2; ++j)
        {
            printf("%d  ", result[i][j]);
            if(j == c2-1)
                printf("\n\n");
        }
    return 0;
}






























10. Write a C program to insert a character at specified position and move the remaining character to right.


#include<stdio.h>

int main()
 {
    int i,pos, ele,d,len;
    char str[25]; 

   for(i=0;i<stri] != ‘\0’;i++)
            len++;
  
   printf(“Enter element and position\n”);
   scanf(“%c%d”, &ele,&pos);

   if(pos > len)
      printf(“Out of Limit”);

  else
      {
        for( i = len; i >= pos; i-- )
               str[i] = str[ i-1];
         

        str[pos] =ele;
        len++;
        printf(“\n %s”, str);

      }
   }

   
      



















11. Write a C program to search an element using Binary search.	

#include <stdio.h>
 
int main()
{
   int c, first, last, middle, n, search, array[100];
 
   printf("Enter number of elements\n");
   scanf("%d",&n);
 
   printf("Enter %d integers\n", n);
 
   for (c = 0; c < n; c++)
      scanf("%d",&array[c]);
 
   printf("Enter value to find\n");
   scanf("%d", &search);
 
   first = 0;
   last = n - 1;
   middle = (first+last)/2;
 
   while (first <= last) {
      if (array[middle] < search)
         first = middle + 1;    
      else if (array[middle] == search) {
         printf("%d found at location %d.\n", search, middle+1);
         break;
      }
      else
         last = middle - 1;
 
      middle = (first + last)/2;
   }
   if (first > last)
      printf("Not found! %d isn't present in the list.\n", search);
}















12. Write a C program to check whether a number is a power of 2or not.

#include <stdio.h>
 
int main()
{
    int num;
    int tempNum,flag;
     
    printf("Enter an integer number: ");
    scanf("%d",&num);
     
    tempNum=num;
    flag=0;
    /*check power of two*/
    while(tempNum!=1)
    {
        if(tempNum%2!=0){
            flag=1;
            break;
        }
        tempNum=tempNum/2;
    }
  
    if(flag==0)
        printf("%d is a number that is the power of 2.",num);
    else
        printf("%d is not the power of 2.",num);
}























13. Write C user defined functions
a)	To input N integer numbers into a single dimension array.
b)	To sort the integer numbers in descending order using selection sort technique.
c)	To print the single dimension array elements.
Using these functions, write a C program to input N integer numbers into a single dimension array, sort them in descending order, and print both the given array & the sorted array with suitable headings.

#include <stdio.h>
 
int main()
{
  int array[100], n, c, d, position, swap;
 
  printf("Enter number of elements\n");
  scanf("%d", &n);
 
  printf("Enter %d integers\n", n);
 
  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);
 
  for (c = 0; c < (n - 1); c++)
  {
    position = c;
   
    for (d = c + 1; d < n; d++)
    {
      if (array[position] > array[d])
        position = d;
    }
    if (position != c)
    {
      swap = array[c];
      array[c] = array[position];
      array[position] = swap;
    }
  }
 
  printf("Sorted list in ascending order:\n");
   for (c = 0; c < n; c++)
    printf("%d\n", array[c]);
 
}





14. Write a C program to check whether the number entered is prime or not

#include <stdio.h>
int main()
{
    int n, i, flag = 0;

    printf("Enter a positive integer: ");
    scanf("%d", &n);

    for(i = 2; i <= n/2; ++i)
    {
        // condition for nonprime number
        if(n % i == 0)
        {
            flag = 1;
            break;
        }
    }

    if (n == 1) 
    {
      printf("1 is neither a prime nor a composite number.");
    }
    else 
    {
        if (flag == 0)
          printf("%d is a prime number.", n);
        else
          printf("%d is not a prime number.", n);
    }
    
    return 0;
}


















15. Write a C program to read and find the frequency of characters in a given string.

#include <stdio.h>
#include <string.h>
 
int main()
{
   char string[100];
   int c = 0, count[26] = {0}, x;
 
   printf("Enter a string\n");
   gets(string);
 
   while (string[c] != '\0') 
   {
   
      if (string[c] >= 'a' && string[c] <= 'z') 
      {
         x = string[c] - 'a';
         count[x]++;
      }
 
      c++;
   }
 
   for (c = 0; c < 26; c++)
         printf("%c occurs %d times in the string.\n", c + 'a', count[c]);

}























16. Write a C program to read a string and sort it alphabetically.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int main()
{
  char ch, input[100], output[100];
  int no[26] = {0}, n, c, t, x;
 
  printf("Enter some text\n");
  scanf("%s", input);
 
  n = strlen(input);
 
    for (c = 0; c < n; c++)
  {
    ch = input[c] - 'a';
    no[ch]++;
  }
 
  t = 0;
 
  for (ch = 'a'; ch <= 'z'; ch++)
  {
    x = ch - 'a';
 
    for (c = 0; c < no[x]; c++)
    {
      output[t] = ch;
      t++;
    }
  }
  output[t] = '\0';
 
  printf("%s\n", output);
}













17. Using functions develop a C program to perform the following tasks by parameter passing 
concept:
c)	To read a string from the user
Print appropriate message for palindrome or not palindrome

#include <stdio.h>
#include <string.h>
void check(char [], int);
int main()
{
char word[15];
printf("Enter a string to check if it is a palindrome\n");
scanf("%s", word);
check(word, 0);

return 0;
}

void check (char word [], int index)
{
intlen = strlen(word) - (index + 1);
if (word[index] == word[len])
    {
if (index + 1 == len || index == len)
        {
printf("The entered word is a palindrome\n");
return;
        }
check(word, index + 1);
    }
else
    {
printf("The entered word is not a palindrome\n");
    }
}}

18. Write a program to enter a sentence and print total number of vowels and each vowel count separately.

#include <stdio.h>

int main()
{
    char line[150];
    int i, vowels;

    vowels =  consonants = digits = spaces = 0;

    printf("Enter a line of string: ");
    scanf("%[^\n]", line);

    for(i=0; line[i]!='\0'; ++i)
    {
        if(line[i]=='a' || line[i]=='e' || line[i]=='i' ||
           line[i]=='o' || line[i]=='u' || line[i]=='A' ||
           line[i]=='E' || line[i]=='I' || line[i]=='O' ||
           line[i]=='U')
        {
            ++vowels;
        }
       
    }

    printf("Vowels: %d",vowels);
    
}






















19. Write a C program to read a matrix A[m*n] and to find the following using functions: 
a) Sum of elements of each row. 
b) Sum of elements of each column. 
c) Sum of all the elements of matrix. 
d) Sum of principle diagonal elements

#include <stdio.h>
    void main ()
    {
 
        static int array[10][10];
        int i, j, m, n, sum = 0;
 
        printf("Enter the order of the matrix\n");
        scanf("%d %d", &m, &n);
 
        printf("Enter the elements of the matrix\n");
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j) 
            {
                scanf("%d", &array[i][j]);
            }
        }
 
        for (i = 0; i < m; ++i) 
        {
            for (j = 0; j < n; ++j) 
            {
                sum = sum + array[i][j] ;
            }
 
            printf("Sum of the %d row is = %d\n", i, sum);
            sum = 0;
 
        }
        sum = 0;
        for (j = 0; j < n; ++j) 
        {
            for (i = 0; i < m; ++i)
            {
                sum = sum + array[i][j];
            }
 
            printf("Sum of the %d column is = %d\n", j, sum);
            sum = 0;
 
        }


        sum = 0;
		for (j = 0; j < n; ++j) 
        {
            for (i = 0; i < m; ++i)
            {
                sum = sum + array[i][j];
            }
        }
         printf("Sum of all elements = %d\n",  sum);
         
        sum = 0;
		for (j = 0; j < n; ++j) 
        {
            for (i = 0; i < m; ++i)
            {
                if( i == j )
				sum = sum + array[i][j];
            }
        }
         printf("Sum of diagonal elements = %d\n",  sum);
         
 
    }






































20. Write a C program to check whether the entered number is positive, negative or zero.

#include <stdio.h> 
  
int main() 
{ 
    int A; 
  
    printf("Enter the number A: "); 
    scanf("%d", &A); 
  
    if (A > 0) 
        printf("%d is positive.", A); 
    else if (A < 0) 
        printf("%d is negative.", A); 
    else if (A == 0) 
        printf("%d is zero.", A); 
 
}





































21. Write a C program to read a list of  N integer numbers in an array and print the following:
a) the maximum value
b) the minimum value
c) the range      [ Hint: This is computed as maximum-minimum.]
d) the average value    [ Hint: Count The average is Sum/Count ]



#include <stdio.h>
int main()
{
    int arr[100], sum=0, range=0;
    int i, max, min, size;
    float avg=0;

    printf("Enter size of the array: ");
    scanf("%d", &size);

    printf("Enter elements in the array: ");
    for(i=0; i<size; i++)
        scanf("%d", &arr[i]);

    max = arr[0];
    min = arr[0];

    for(i=1; i<size; i++)
    {

        if(arr[i] > max)
            max = arr[i];

        if(arr[i] < min)
            min = arr[i];
            
        sum = sum + arr[i];    
        
    }
  
    avg = (float)sum/(float)size; 
    
    printf("Maximum element = %d\n", max);
    printf("Minimum element = %d\n", min);
    printf("average = %f\n", avg);
    printf("range = %d\n", max-min);

}








22. Write a C program to generate Fibonacci series using recursion.

#include <stdio.h>
 
int main()
{
  int n, first = 0, second = 1, next, c;
 
  printf("Enter the number of terms\n");
  scanf("%d", &n);
 
  printf("First %d terms of Fibonacci series are:\n", n);
 
  for (c = 0; c < n; c++)
  {
    if (c <= 1)
      next = c;
    else
    {
      next = first + second;
      first = second;
      second = next;
    }
    printf("%d\n", next);
  }
 
  return 0;
}




























23. Write a C program to perform the following operations using recursive functions:
a)GCD, LCM (Using GCD method)
b)Factorial of a Number



#include "stdio.h"
int find_gcd(int,int);
int find_lcm(int,int);
int main()
{
int num1,num2,gcd,lcm;
printf("\nEnter two numbers:\n ");
scanf("%d %d",&num1,&num2);
gcd=find_gcd(num1,num2);

printf("\nGCD of %d and %d is: %d\n",num1,num2,gcd);

 if(num1>num2)
  lcm = find_lcm(num1,num2);
 else
  lcm = find_lcm(num2,num1);

printf("\nLCM of %d and %d is: %d\n",num1,num2,lcm);
 return 0;
}


int find_gcd(int n1,int n2){
 while(n1!=n2){
  if(n1>n2)
   return find_gcd(n1-n2,n2);
  else
   return find_gcd(n1,n2-n1);
 }
 return n1;
}

int find_lcm(int n1,int n2){

 static int temp = 1;

 if(temp % n2 == 0 && temp % n1 == 0)
  return temp;
 temp++;
find_lcm(n1,n2);





24. Write a C program to find the length of the string without using library function.

#include<stdio.h>
 
int main() {
   char str[100];
   int length;
 
   printf("\nEnter the String : ");
   gets(str);
 
   length = 0;  // Initial Length
 
   while (str[length] != '\0')
      length++;
 
   printf("\nLength of the String is : %d", length);
   return(0);
}





































25. Write a C program to count vowels and consonants in a string using pointer.

#include <stdio.h>
int main()
{
    char str[100];
    char *ptr;
    int  cntV,cntC;
     
    printf("Enter a string: ");
    gets(str);
     
     ptr=str;
     
    cntV=cntC=0;
    while(*ptr!='\0')
    {
        if(*ptr=='A' ||*ptr=='E' ||*ptr=='I' ||*ptr=='O' ||*ptr=='U' ||*ptr=='a' ||*ptr=='e' ||*ptr=='i' ||*ptr=='o' ||*ptr=='u')
            cntV++;
        else
            cntC++;
      
        ptr++;
    }
     
    printf("Total number of VOWELS: %d, CONSONANT: %d\n",cntV,cntC);        
    return 0;
}



























26. Write a C program to swap two numbers using pointers.

#include <stdio.h>
 
void swap(int*, int*); 

int main()
{
   int x, y;
 
   printf("Enter the value of x and y\n");
   scanf("%d%d",&x,&y);
 
   printf("Before Swapping\nx = %d\ny = %d\n", x, y);
 
   swap(&x, &y);
 
   printf("After Swapping\nx = %d\ny = %d\n", x, y);
 
   return 0;
}

void swap(int *a, int *b)
{
   int t;
 
   t  = *b;
   *b = *a;
   *a = t;
}

























27. Create a structure called student with the following members student name, rollno, and a structure with marks details in three tests. Write a C program to create N records and 
d)	Search on roll no and display all the records.
e)	Average marks in each test.
            Highest marks in each test.


#include<stdio.h>
#include<string.h>
#define SIZE 60
struct student {
char name[30];
char USN[20];
int marks;
};
void main() {
int i, j, max, count, total,avg, n, a[SIZE], ni;
struct student st[SIZE];
printf("Enter how many students: ");
scanf("%d", &n);
   /* for loop to read the names and roll numbers*/
   for (i = 0; i < n; i++) {
printf("\nEnter name and USN for student %d : ", i);
scanf("%s", &st[i].name);
scanf("%s", &st[i].USN);
   }
   /* for loop to read ith student's jth subject*/
   for (i = 0; i < n; i++) {
      for (j = 0; j <= 2; j++) {
printf("\nEnter marks of student %d for subject %d : ", i, j);
scanf("%d", &st[i].sub[j]);
      }
   }
   /* (i) for loop to calculate total marks obtained by each student*/
   for (i = 0; i < n; i++) {
      total = 0;
      for (j = 0; j < 3; j++) {
total = total + st[i].sub[j];
      }
printf("\nTotal marks obtained by student %s are %dn", st[i].name,total);
      a[i] = total;
/* average marks*/
for (i = 0; i < n; i++) {
totalsum= 0;
for (j = 0; j < 3; j++) {
totalsum =totalsum+st[i].total;
avg=totalsum/n;
} }
printf("\nAverage marks obtained by students %d\n", avg);
}
   /* (ii) for loop to list out the student's roll numbers 
who   have secured the highest marks in each subject */
   /* student who secured more than average */
for (j = 0; j < 3; j++) {
max=0;
for (i = 0; i < n; i++) {
if (avg<st[i].sub[j]) {
max = st[i].sub[j];
ni = i;
printf("\nStudent %s got more than average marks = %d in Subject : %d",st[ni].name, max, j);
}
else
printf("\nStudent %s got less than average marks = %d in Subject : %d",st[ni].name, max, j);
         }
      }
max = 0;
for (i = 0; i < n; i++) {
if (avg< a[i]) {
         max = a[i];
ni = i;
      }
   }
printf("\n%s obtained the total highest marks.", st[ni].name);
}



























28. Write a C program to check whether the entered year is leap or not.

#include <stdio.h>
 
int main()
{
  int year;
 
  printf("Enter a year to check if it is a leap year\n");
  scanf("%d", &year);
 
  if (year%4 == 0) 
    printf("%d is a leap year.\n", year);
  else 
    printf("%d isn't a leap year.\n", year);  
   
}




































29. Design a structure 'Complex' and write a C program to perform the following operations:
i.	Reading a complex number.
ii.	Addition of two complex numbers.

#include <stdio.h>
 
struct complex
{
   int real, img;
};
 
int main()
{
   struct complex a, b, c;
 
   printf("Enter a and b where a + ib is the first complex number.\n");
   scanf("%d%d", &a.real, &a.img);

   printf("Enter c and d where c + id is the second complex number.\n");
   scanf("%d%d", &b.real, &b.img);
 
   c.real = a.real + b.real;
   c.img = a.img + b.img;
 
   printf("Sum of the complex numbers: (%d) + (%di)\n", c.real, c.img);
}



















30. Write a C program to input a number and check whether the number is palindrome or not.

#include <stdio.h>
 
int main()
{
   int n, reverse = 0, t;
 
   printf("Enter a number to check if it is a palindrome or not\n");
   scanf("%d", &n);
 
   t = n;
 
   while (t != 0)
   {
      reverse = reverse * 10;
      reverse = reverse + t%10;
      t = t/10;
   }
 
   if (n == reverse)
      printf("%d is a palindrome number.\n", n);
   else
      printf("%d isn't a palindrome number.\n", n);
 
   return 0;
}

